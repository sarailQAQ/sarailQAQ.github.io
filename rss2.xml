<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sarail want to sleep all day</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Fast Fishing Transform</description>
    <pubDate>Wed, 14 Oct 2020 16:36:40 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Zeldain Garden</title>
      <link>http://example.com/2020/10/15/Zeldain-Garden/</link>
      <guid>http://example.com/2020/10/15/Zeldain-Garden/</guid>
      <pubDate>Wed, 14 Oct 2020 16:15:35 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/7817/E&quot;&gt;https://ac.nowcoder.com/acm/contest/7817/E&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; </description>
        
      
      
      
      <content:encoded><![CDATA[<p>链接：<a href="https://ac.nowcoder.com/acm/contest/7817/E">https://ac.nowcoder.com/acm/contest/7817/E</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个区间$[n,m]$,统计这个区间内所有数的因数个数之和（包括1和自身），$1\leqslant n \leqslant m\leqslant 10^{12}$</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>考虑一个数m的情况：由于所有因数总是成对出现，我们只需要枚举$[1,\sqrt{m}]$即可找出m的所有因数。</p><p>引申到区间，首先我们发现，<strong>$[n,m]$中所有数的因数对中，较小的那一个一定会小于$\sqrt{m}$,</strong>写成命题的话就是：</p><blockquote><p>如果$a*b=x且x\in[n,m]，那么min\{a,b\}\leqslant\sqrt{m} $</p></blockquote><p>根据这个性质，我们从1到$\sqrt{m}$枚举其中一个因子 $x$,找到这样两个整数$l$，$r$使得：</p><script type="math/tex; mode=display">x\leqslant l\leqslant r ,且 n\leqslant l*x \leqslant r*x\leqslant m</script><p>为什么$l,r$要比x大呢？这是为了防止重复计算。如果我们有这样一个数$y$使得</p><script type="math/tex; mode=display">n \leqslant y * y \leqslant m且y * (y-1) \geq n</script><p>那么在缺少这个限制时$y$和$y-1$这一对因数就会在$x=y,x=y-1$时分别被计算一次，答案就比正确答案大2。($ y-2,y-3…$同理)</p><p>这样，$[n,m]$中所有以x为因子的数的个数就是$r-l+1$，由于因数成对出现，我们就找到了$2*(r-l+1)$个因数。</p><p>值得注意的是平方数会多算一个因数，最后要把多余的数减掉。</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">50</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll n, m, ans;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll k)</span> </span>&#123;</span><br><span class="line">    ll l = n / k + (n % k ? <span class="number">1</span> : <span class="number">0</span>), r = m / k;</span><br><span class="line">    l = max(l, k); <span class="comment">//防止重复统计</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * (r - l + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i * i &lt;= m; ++i) &#123;</span><br><span class="line">        ans +=  calc(i);</span><br><span class="line">        <span class="keyword">if</span> (i * i &gt;= n) ans--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>http://example.com/2020/10/15/Zeldain-Garden/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Flowers</title>
      <link>http://example.com/2020/10/15/Flowers/</link>
      <guid>http://example.com/2020/10/15/Flowers/</guid>
      <pubDate>Wed, 14 Oct 2020 16:14:51 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;题目链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/7830/J&quot;&gt;https://ac.nowcoder.com/acm/contest/7830/J&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大</description>
        
      
      
      
      <content:encoded><![CDATA[<p>题目链接：<a href="https://ac.nowcoder.com/acm/contest/7830/J">https://ac.nowcoder.com/acm/contest/7830/J</a></p><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>有n种花，第$i $种花有$a_i$朵。现在要用m朵花组成一束花，要求每束花的中每朵花的种类各不相同，求最多组成几束花。</p><h3 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h3><p>假设m=2，这就变成了一个配对问题。我们设$m=max\{a_i\},tot=sum\{a_i\}$,当$m\leq\frac {tot}{2}$,则一定是能够恰好两两配对的（花朵总数为奇数会有一个剩余），答案为$\frac{tot}{2}$。反之，数量最多的那种花一定能和其他所有花配对，此时我们只要考虑剩下的花就可以了，答案为$tot -m$。</p><p>那么对于m大于2的情况怎么办呢？很简单，只要某一束花大于等于$\frac{tot}{m}$，这种花就一定能和其他所有花配对，我们把这种花的数量从tot里删掉，再把m减1就可以了，最后的答案是$\frac{tot}m$,注意这里的tot是删完之后剩下的花的总数。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> a[N], n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        ll tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i);</span><br><span class="line">            tot += a[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (a[i] &gt;= tot / m) &#123;</span><br><span class="line">            tot -= a[i];</span><br><span class="line">            m--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; tot / m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>http://example.com/2020/10/15/Flowers/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Identical Trees</title>
      <link>http://example.com/2020/10/15/Identical%20Trees/</link>
      <guid>http://example.com/2020/10/15/Identical%20Trees/</guid>
      <pubDate>Wed, 14 Oct 2020 16:12:55 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/5675/J&quot;&gt;https://ac.nowcoder.com/acm/contest/5675/J&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：</description>
        
      
      
      
      <content:encoded><![CDATA[<p>链接：<a href="https://ac.nowcoder.com/acm/contest/5675/J">https://ac.nowcoder.com/acm/contest/5675/J</a></p><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>给两颗有根树，每个节点有一个标签，每次操作可以任意修改一个标签，问使这两棵树完全相同需要的最少的操作次数。</p><h3 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h3><p>容易发现这个问题等价于找个对应关系，使得相同的标号尽量多，剩下的标号需要修改。可以用树形dp，转移的时候使用二分图最大权匹配。</p><p>具体来说，先对每一个子树进行树哈希（用于判断是否同构），然后进行树形dp。dp时，若发现树1的子树a和树2中的子树b同构，则考虑将他们匹配并求出他们匹配时最多有多少对节点的标签会相同。最大的标签数如何求呢？就是前述的二分图最大权匹配：枚举子树a和子树b的儿子节点，若发现以这两个节点为根的树同构（哈希值相同），则连一条边，边权为递归调用dp方法计算出的这两棵子树配对的最多相同标签的节点数；枚举完所有情况后，再做一遍km算法求出最大权匹配，若子树a与子树b的标签相同，答案为最大权+1，否则为最大权。显然，叶子节点就是天然的递归边界。</p><p>另外，虽然题目的数据规模为500，但是在树形结构下二分图中实际有边相连的点的个数会很少，就算是$O(n^4)$的km算法也会跑的非常快（就算是菊花图）。树哈希的方法也有很多种，且一般不容易被卡，<del>随便瞎搞应该也都是可以的</del>。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500</span> + <span class="number">50</span>,base = <span class="number">23333</span>,inf = <span class="number">1e17</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t1[N],t2[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,sz;</span><br><span class="line">    ull h; <span class="comment">// 以当前节点为根的子树的哈希值，用于判断是否同构。自然溢出取模</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> node&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (h == rhs.h) &amp;&amp; (sz == rhs.sz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> from,to,dist;</span><br><span class="line">edge(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> d) : from(u),to(v),dist(d) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ll Left[N],Lx[N],Ly[N],w[N][N];</span><br><span class="line"><span class="keyword">bool</span> S[N],T[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">S[i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="keyword">if</span> (Lx[i] + Ly[j] == w[i][j] &amp;&amp; !T[j]) &#123;</span><br><span class="line">T[j] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (!Left[j] || match(Left[j],n)) &#123;</span><br><span class="line">Left[j] = i;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">ll a = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(S[i])</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="keyword">if</span>(!T[j])</span><br><span class="line">a = min(a, Lx[i] + Ly[j] - w[i][j]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (S[i]) Lx[i] -= a;</span><br><span class="line"><span class="keyword">if</span> (T[i]) Ly[i] += a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">km</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">Left[i] = <span class="number">0</span>;</span><br><span class="line">Lx[i] = Ly[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) </span><br><span class="line">Lx[i] = max(Lx[i], w[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>( ; ;) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) S[j] = T[j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (match(i, n)) <span class="keyword">break</span>; <span class="keyword">else</span> update(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的结果为最优匹配中编号相同节点的个数最大值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buildMap</span><span class="params">(<span class="keyword">int</span> rt1, <span class="keyword">int</span> rt2)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; stk;</span><br><span class="line"><span class="keyword">int</span> t1, t2, nn = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 由于建树方式能保证一棵树的儿子节点在t数组中的下标总是连续的</span></span><br><span class="line">    <span class="comment">// 因此在这里我们将每一个儿子节点的与第0个儿子的下标的差值加一</span></span><br><span class="line">    <span class="comment">// 作为其在二分图中的编号，以此来减少km算法的时间开销</span></span><br><span class="line"><span class="keyword">if</span> (t[rt1].son.size() &gt; <span class="number">0</span>) </span><br><span class="line">t1 = t[rt1].son[<span class="number">0</span>], t2 = t[rt2].son[<span class="number">0</span>], nn = t[rt1].son.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> son1 : t[rt1].son)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> son2 : t[rt2].son) </span><br><span class="line"><span class="keyword">if</span>(t[son1] == t[son2]) </span><br><span class="line">stk.push_back(edge(son1 - t1 + <span class="number">1</span>, son2 - t2 + <span class="number">1</span>, buildMap(son1,son2)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 待儿子节点计算完后，才开始计算当前节点否则图中会有多余的边</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : stk) w[e.from][e.to] = e.dist;</span><br><span class="line">km(nn);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nn; ++i) res += w[Left[i]][i];</span><br><span class="line">    <span class="comment">// 还原</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : stk) w[e.from][e.to] = -inf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里注意要判断当前节点是否相同</span></span><br><span class="line"><span class="keyword">return</span> res + (t[rt1].u == t[rt2].u ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> isprime[N * N];</span><br><span class="line"><span class="keyword">int</span> prime[N];</span><br><span class="line"><span class="keyword">int</span> n,tot,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(<span class="keyword">int</span> MAX)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(isprime, <span class="literal">true</span>, <span class="keyword">sizeof</span>(isprime));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; N - <span class="number">10</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (isprime[i]) prime[x++] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * prime[j] &gt;= MAX) <span class="keyword">break</span>;</span><br><span class="line">            isprime[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    t[u].sz = <span class="number">1</span>; t[u].h = <span class="number">0</span>;</span><br><span class="line">    sort(t[u].son.begin(),t[u].son.end());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v : t[u].son) &#123;</span><br><span class="line">        dfs(v);</span><br><span class="line">        t[u].sz += t[v].sz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : t[u].son) t[u].h += t[v].h * prime[t[v].sz];</span><br><span class="line">    t[u].h++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span>* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt = ++tot;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ; ++i)</span><br><span class="line">        <span class="keyword">if</span> (p[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            t[rt].u = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    Q.push(rt);</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (p[i] == t[u].u) &#123;</span><br><span class="line">                t[u].son.push_back(++tot);</span><br><span class="line">                t[tot].u = i;</span><br><span class="line">                Q.push(tot);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(rt);</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">get_prime(N * N - <span class="number">100</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j)</span><br><span class="line">w[i][j] = -inf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; t1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; t2[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rt1 = build(t1), rt2 = build(t2);</span><br><span class="line"></span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    ans = max(ans,n - buildMap(rt1,rt2));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>http://example.com/2020/10/15/Identical%20Trees/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
